"use strict";(self.webpackChunkgeodd_networks=self.webpackChunkgeodd_networks||[]).push([[2149],{8867:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var t=n(4848),s=n(8453);const r={displayed_sidebar:"celestiaSidebar"},i="Register Validator",o={id:"celestia/validator/register-validator",title:"Register Validator",description:"This guide walks you through the steps required to register your validator node on the Celestia Mocha-4 testnet. It includes instructions for quick-syncing your node, creating or recovering a wallet, and registering a validator. Additionally, the playbooks for automating these steps are referenced for easier execution.",source:"@site/docs/celestia/validator/register-validator.md",sourceDirName:"celestia/validator",slug:"/celestia/validator/register-validator",permalink:"/docs/celestia/validator/register-validator",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/celestia/validator/register-validator.md",tags:[],version:"current",frontMatter:{displayed_sidebar:"celestiaSidebar"},sidebar:"celestiaSidebar",previous:{title:"Quickstart",permalink:"/docs/celestia/quickstart"},next:{title:"Upgrade Validator",permalink:"/docs/celestia/validator/upgrade-validator"}},l={},c=[{value:"<strong>1. Quick Sync</strong>",id:"1-quick-sync",level:3},{value:"<strong>Steps for Quick Sync:</strong>",id:"steps-for-quick-sync",level:4},{value:"<strong>2. Create or Recover a Wallet</strong>",id:"2-create-or-recover-a-wallet",level:3},{value:"<strong>Create a New Wallet:</strong>",id:"create-a-new-wallet",level:4},{value:"<strong>Recover an Existing Wallet:</strong>",id:"recover-an-existing-wallet",level:4},{value:"<strong>Save Wallet and Validator Addresses:</strong>",id:"save-wallet-and-validator-addresses",level:4},{value:"<strong>3. Check Sync Status</strong>",id:"3-check-sync-status",level:3},{value:"<strong>4. Fund Your Wallet</strong>",id:"4-fund-your-wallet",level:3},{value:"<strong>5. Create a Validator</strong>",id:"5-create-a-validator",level:3},{value:"<strong>6. Automating with Playbooks</strong>",id:"6-automating-with-playbooks",level:3}];function d(e){const a={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"register-validator",children:"Register Validator"})}),"\n",(0,t.jsx)(a.p,{children:"This guide walks you through the steps required to register your validator node on the Celestia Mocha-4 testnet. It includes instructions for quick-syncing your node, creating or recovering a wallet, and registering a validator. Additionally, the playbooks for automating these steps are referenced for easier execution."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"1-quick-sync",children:(0,t.jsx)(a.strong,{children:"1. Quick Sync"})}),"\n",(0,t.jsx)(a.p,{children:"Quick sync downloads the entire data directory from a third-party provider, allowing your node to synchronize faster. This method ensures that your node has all the necessary blockchain data from a snapshot."}),"\n",(0,t.jsx)(a.h4,{id:"steps-for-quick-sync",children:(0,t.jsx)(a.strong,{children:"Steps for Quick Sync:"})}),"\n",(0,t.jsxs)(a.p,{children:["To quick-sync your node from a snapshot, follow these steps manually or run the ",(0,t.jsx)(a.strong,{children:"Quick Sync Playbook"}),":"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:'cd $HOME\nrm -rf ~/.celestia-app/data\nmkdir -p ~/.celestia-app/data\nSNAP_NAME=$(curl -s https://snaps.qubelabs.io/celestia/ | \\\n    egrep -o ">mocha-4.*tar" | tr -d ">")\naria2c -x 16 -s 16 -o celestia-snap.tar "https://snaps.qubelabs.io/celestia/${SNAP_NAME}"\ntar xf celestia-snap.tar -C ~/.celestia-app/data/\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Alternatively, use the ",(0,t.jsx)(a.strong,{children:"Quick Sync Playbook"})," to automate this process:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"ansible-playbook -i hosts.ini playbooks/snapshot_sync.yml -l <target-host>\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"2-create-or-recover-a-wallet",children:(0,t.jsx)(a.strong,{children:"2. Create or Recover a Wallet"})}),"\n",(0,t.jsx)(a.p,{children:"After syncing, you need to create a wallet or restore an existing one to participate in the network."}),"\n",(0,t.jsx)(a.h4,{id:"create-a-new-wallet",children:(0,t.jsx)(a.strong,{children:"Create a New Wallet:"})}),"\n",(0,t.jsx)(a.p,{children:"To create a new wallet, run the following command manually:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"celestia-appd keys add $WALLET\n"})}),"\n",(0,t.jsx)(a.p,{children:"Don\u2019t forget to save the mnemonic"}),"\n",(0,t.jsx)(a.h4,{id:"recover-an-existing-wallet",children:(0,t.jsx)(a.strong,{children:"Recover an Existing Wallet:"})}),"\n",(0,t.jsx)(a.p,{children:"To recover an existing wallet using your mnemonic phrase:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"celestia-appd keys add $WALLET --recover\n"})}),"\n",(0,t.jsx)(a.h4,{id:"save-wallet-and-validator-addresses",children:(0,t.jsx)(a.strong,{children:"Save Wallet and Validator Addresses:"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:'WALLET_ADDRESS=$(celestia-appd keys show $WALLET -a)\nVALOPER_ADDRESS=$(celestia-appd keys show $WALLET --bech val -a)\necho "export WALLET_ADDRESS=$WALLET_ADDRESS" >> $HOME/.bash_profile\necho "export VALOPER_ADDRESS=$VALOPER_ADDRESS" >> $HOME/.bash_profile\nsource $HOME/.bash_profile\n'})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"3-check-sync-status",children:(0,t.jsx)(a.strong,{children:"3. Check Sync Status"})}),"\n",(0,t.jsx)(a.p,{children:"Before proceeding with validator registration, make sure your node is fully synced. Run the following command manually:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"celestia-appd status 2>&1 | jq\n"})}),"\n",(0,t.jsxs)(a.p,{children:["If your node is fully synced, the output will show ",(0,t.jsx)(a.code,{children:'"false"'})," for ",(0,t.jsx)(a.code,{children:"catching_up"}),"."]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"4-fund-your-wallet",children:(0,t.jsx)(a.strong,{children:"4. Fund Your Wallet"})}),"\n",(0,t.jsx)(a.p,{children:"To create a validator, you\u2019ll need to fund your wallet with testnet tokens. You can request tokens in the Celestia Discord channel by providing your wallet address."}),"\n",(0,t.jsx)(a.p,{children:"Once you have received the testnet tokens, check your balance:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"celestia-appd query bank balances $WALLET_ADDRESS\n"})}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"5-create-a-validator",children:(0,t.jsx)(a.strong,{children:"5. Create a Validator"})}),"\n",(0,t.jsx)(a.p,{children:"Once your wallet is funded and your node is fully synced, you can create a validator by running the following command manually:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:'celestia-appd tx staking create-validator \\\n--amount 1000000utia \\\n--from $WALLET \\\n--commission-rate 0.1 \\\n--commission-max-rate 0.2 \\\n--commission-max-change-rate 0.01 \\\n--min-self-delegation 1 \\\n--pubkey $(celestia-appd tendermint show-validator) \\\n--moniker "test-validator" \\\n--identity "" \\\n--website "https://myvalidatorwebsite.com" \\\n--details "I love blockchain \u2764\ufe0f" \\\n--chain-id mocha-4 \\\n--gas auto --gas-adjustment 1.5 --gas-prices 0.005utia \\\n-y\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Alternatively, you can automate this process by running the ",(0,t.jsx)(a.strong,{children:"Validator Registration Playbook"}),":"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"ansible-playbook -i hosts.ini playbooks/register_validator.yml -l <target-host>\n"})}),"\n",(0,t.jsx)(a.p,{children:"This playbook will:"}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsx)(a.li,{children:"Check if your node is fully synced."}),"\n",(0,t.jsx)(a.li,{children:"Prompt you to ensure that your wallet is funded."}),"\n",(0,t.jsxs)(a.li,{children:["Create a validator using the specified variables (e.g., ",(0,t.jsx)(a.code,{children:"wallet_name"}),", ",(0,t.jsx)(a.code,{children:"amount_stake"}),", ",(0,t.jsx)(a.code,{children:"moniker"}),", ",(0,t.jsx)(a.code,{children:"details"}),", and ",(0,t.jsx)(a.code,{children:"website"}),")."]}),"\n"]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h3,{id:"6-automating-with-playbooks",children:(0,t.jsx)(a.strong,{children:"6. Automating with Playbooks"})}),"\n",(0,t.jsxs)(a.ul,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Quick Sync"}),": Use the ",(0,t.jsx)(a.strong,{children:"Quick Sync Playbook"})," to automate syncing from a snapshot."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Validator Registration"}),": Use the ",(0,t.jsx)(a.strong,{children:"Validator Registration Playbook"})," to automate the process of registering your validator."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"You can refer to these playbooks to simplify the process for both quick-syncing and validator creation, avoiding repetitive manual steps."})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>o});var t=n(6540);const s={},r=t.createContext(s);function i(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);