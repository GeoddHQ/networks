"use strict";(self.webpackChunkgeodd_networks=self.webpackChunkgeodd_networks||[]).push([[4926],{8241:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(4848),n=t(8453);const a={displayed_sidebar:"celestiaSidebar"},i="Quick Commands",o={id:"celestia/validator/quick-commands",title:"Quick Commands",description:"*",source:"@site/docs/celestia/validator/quick-commands.md",sourceDirName:"celestia/validator",slug:"/celestia/validator/quick-commands",permalink:"/docs/celestia/validator/quick-commands",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/celestia/validator/quick-commands.md",tags:[],version:"current",frontMatter:{displayed_sidebar:"celestiaSidebar"},sidebar:"celestiaSidebar",previous:{title:"Upgrade Validator",permalink:"/docs/celestia/validator/upgrade-validator"},next:{title:"ZFS Storage (optional)",permalink:"/docs/celestia/bridge-da-node/zfs-storage-optional"}},l={},c=[{value:"<strong>Service Operations \u2699\ufe0f</strong>",id:"service-operations-\ufe0f",level:3},{value:"<strong>Check Logs</strong>",id:"check-logs",level:4},{value:"<strong>Start Service</strong>",id:"start-service",level:4},{value:"<strong>Stop Service</strong>",id:"stop-service",level:4},{value:"<strong>Restart Service</strong>",id:"restart-service",level:4},{value:"<strong>Enable Service at Boot</strong>",id:"enable-service-at-boot",level:4},{value:"<strong>Disable Service</strong>",id:"disable-service",level:4},{value:"<strong>Node Info</strong>",id:"node-info",level:3},{value:"<strong>Future Plans: Ansible Cron for Weekly Delegation</strong>",id:"future-plans-ansible-cron-for-weekly-delegation",level:3}];function d(e){const s={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"quick-commands",children:"Quick Commands"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"service-operations-\ufe0f",children:(0,r.jsx)(s.strong,{children:"Service Operations \u2699\ufe0f"})}),"\n",(0,r.jsx)(s.h4,{id:"check-logs",children:(0,r.jsx)(s.strong,{children:"Check Logs"})}),"\n",(0,r.jsx)(s.p,{children:"To monitor the logs of your Celestia service in real-time:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"sudo journalctl -u celestia-appd -f\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h4,{id:"start-service",children:(0,r.jsx)(s.strong,{children:"Start Service"})}),"\n",(0,r.jsx)(s.p,{children:"To start the Celestia service:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"sudo systemctl start celestia-appd\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h4,{id:"stop-service",children:(0,r.jsx)(s.strong,{children:"Stop Service"})}),"\n",(0,r.jsx)(s.p,{children:"To stop the Celestia service:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"sudo systemctl stop celestia-appd\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h4,{id:"restart-service",children:(0,r.jsx)(s.strong,{children:"Restart Service"})}),"\n",(0,r.jsx)(s.p,{children:"To restart the Celestia service:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"sudo systemctl restart celestia-appd\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h4,{id:"enable-service-at-boot",children:(0,r.jsx)(s.strong,{children:"Enable Service at Boot"})}),"\n",(0,r.jsx)(s.p,{children:"To ensure that the Celestia service starts automatically when the server boots:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"sudo systemctl enable celestia-appd\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h4,{id:"disable-service",children:(0,r.jsx)(s.strong,{children:"Disable Service"})}),"\n",(0,r.jsx)(s.p,{children:"To disable the Celestia service from starting on boot:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"sudo systemctl disable celestia-appd\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"node-info",children:(0,r.jsx)(s.strong,{children:"Node Info"})}),"\n",(0,r.jsx)(s.p,{children:"To check the status of the node and retrieve information such as sync status:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"celestia-appd status 2>&1 | jq\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"future-plans-ansible-cron-for-weekly-delegation",children:(0,r.jsx)(s.strong,{children:"Future Plans: Ansible Cron for Weekly Delegation"})}),"\n",(0,r.jsx)(s.p,{children:"In the future, we will add an Ansible cron job that automates the delegation of testnet rewards to yourself every week. Stay tuned for more updates on automating this process with a playbook!"})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var r=t(6540);const n={},a=r.createContext(n);function i(e){const s=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);