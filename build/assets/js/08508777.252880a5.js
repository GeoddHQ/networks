"use strict";(self.webpackChunkgeodd_networks=self.webpackChunkgeodd_networks||[]).push([[3729],{4743:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=s(4848),o=s(8453);const r={displayed_sidebar:"celestiaSidebar"},t="ZFS Storage (optional)",a={id:"celestia/bridge-da-node/zfs-storage-optional",title:"ZFS Storage (optional)",description:"Enabling ZFS compression on your Data Availability (DA) node is a powerful way to improve storage efficiency by compressing data in real-time. However, ZFS compression can be CPU-intensive, so using a high-end CPU is recommended to handle the compression workload without affecting node performance.",source:"@site/docs/celestia/bridge-da-node/zfs-storage-optional.md",sourceDirName:"celestia/bridge-da-node",slug:"/celestia/bridge-da-node/zfs-storage-optional",permalink:"/docs/celestia/bridge-da-node/zfs-storage-optional",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/celestia/bridge-da-node/zfs-storage-optional.md",tags:[],version:"current",frontMatter:{displayed_sidebar:"celestiaSidebar"},sidebar:"celestiaSidebar",previous:{title:"Quick Commands",permalink:"/docs/celestia/validator/quick-commands"},next:{title:"Running Bridge Node",permalink:"/docs/celestia/bridge-da-node/running-bridge-node"}},l={},c=[{value:"<strong>Requirements</strong>",id:"requirements",level:4},{value:"<strong>Steps to Enable ZFS Compression</strong>",id:"steps-to-enable-zfs-compression",level:4},{value:"<strong>Monitoring Compression Efficiency</strong>",id:"monitoring-compression-efficiency",level:4},{value:"<strong>Important Considerations</strong>",id:"important-considerations",level:4},{value:"ZFS Optimizations for fast sync ",id:"zfs-optimizations-for-fast-sync-",level:2}];function d(e){const n={br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"zfs-storage-optional",children:"ZFS Storage (optional)"})}),"\n",(0,i.jsx)(n.p,{children:"Enabling ZFS compression on your Data Availability (DA) node is a powerful way to improve storage efficiency by compressing data in real-time. However, ZFS compression can be CPU-intensive, so using a high-end CPU is recommended to handle the compression workload without affecting node performance."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"requirements",children:(0,i.jsx)(n.strong,{children:"Requirements"})}),"\n",(0,i.jsx)(n.p,{children:"Before proceeding, ensure you meet the following requirements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Bare Metal Server"}),": The server should have 64GB or more RAM and a high-end CPU to handle the compression tasks efficiently."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Available Disk"}),": At least one unpartitioned disk to create the ZFS pool."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"steps-to-enable-zfs-compression",children:(0,i.jsx)(n.strong,{children:"Steps to Enable ZFS Compression"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 1: Identify Your Disk"})}),"\n",(0,i.jsx)(n.p,{children:"List the available disks on your system to find the one you\u2019ll use for creating the ZFS pool:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"lsblk --nodeps -o name\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note the name of the disk you want to use (e.g., ",(0,i.jsx)(n.code,{children:"/dev/nvme0n1"}),")."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 2: Set ZFS Variables"})}),"\n",(0,i.jsx)(n.p,{children:"Define distinct names for your ZFS pool and dataset:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'ZFS_POOL_NAME="mypool" \nZFS_DATASET_NAME="dataset1"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 3: Install ZFS Utilities"})}),"\n",(0,i.jsx)(n.p,{children:"Install the ZFS utilities on your system:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install zfsutils-linux\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 4: Create the ZFS Pool"})}),"\n",(0,i.jsx)(n.p,{children:"Create a ZFS pool on the disk you identified:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zpool create $ZFS_POOL_NAME /dev/nvme0n1\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you have multiple disks available, you can create the pool using more than one disk:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zpool create $ZFS_POOL_NAME /dev/nvme0n1 /dev/nvme1n1\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 5: Create the ZFS Dataset"})}),"\n",(0,i.jsx)(n.p,{children:"Once the pool is created, create the dataset for storing Celestia node data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zfs create $ZFS_POOL_NAME/$ZFS_DATASET_NAME\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 6: Enable Compression"})}),"\n",(0,i.jsxs)(n.p,{children:["To optimize storage, enable ",(0,i.jsx)(n.code,{children:"zstd-3"})," compression on the dataset:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zfs set compression=zstd-3 $ZFS_POOL_NAME/$ZFS_DATASET_NAME\n"})}),"\n",(0,i.jsx)(n.p,{children:"This ensures data is compressed on the fly to save disk space."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Step 7: Mount the Dataset"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, mount the dataset to your Celestia bridge data folder. Instead of using a custom path, we will mount it directly to ",(0,i.jsx)(n.code,{children:"/home/ubuntu/.celestia-bridge-mocha-4"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zfs set mountpoint=/home/ubuntu/.celestia-bridge-mocha-4 $ZFS_POOL_NAME/$ZFS_DATASET_NAME\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will make your dataset available in the specified directory, and you won\u2019t need to modify the node store path in your Celestia commands."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"monitoring-compression-efficiency",children:(0,i.jsx)(n.strong,{children:"Monitoring Compression Efficiency"})}),"\n",(0,i.jsx)(n.p,{children:"Once the setup is complete, you can check how well ZFS compression is working by viewing the compression ratio:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zfs get compressratio $ZFS_POOL_NAME\n"})}),"\n",(0,i.jsx)(n.p,{children:"This command will show how much data is being compressed. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"NAME              PROPERTY       VALUE  SOURCE\nmypool            compressratio  2.05x  -\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"important-considerations",children:(0,i.jsx)(n.strong,{children:"Important Considerations"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High-End CPU Required"}),": Since ZFS compression can be CPU-intensive, especially with ",(0,i.jsx)(n.code,{children:"zstd-3"}),", ensure your server has a high-performance CPU to handle the compression without affecting the performance of your Celestia node."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real-Time Compression"}),": ZFS will compress data as it is written to disk, allowing for efficient storage management without requiring manual intervention."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"zfs-optimizations-for-fast-sync-",children:"ZFS Optimizations for fast sync "}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"ZFS Compression (zstd-3):"})}),"\n",(0,i.jsx)(n.p,{children:"Enabled and improved storage efficiency without significantly impacting performance."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zfs set compression=zstd-3 $ZFS_POOL_NAME/$ZFS_DATASET_NAME\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Manual Trimming:"}),(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Disable Auto-Trim"}),": To disable ZFS auto-trim, run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo zpool set autotrim=off mypool\n"})}),"\n",(0,i.jsx)(n.p,{children:"This prevents automatic trimming, allowing manual control over trim operations."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Manual Trim Command"}),": To manually trim ZFS and release unused blocks back to the SSD:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo zpool trim mypool\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:["This manually triggers a trim on the ",(0,i.jsx)(n.code,{children:"mypool"}),", optimizing SSD performance."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"You can monitor the trim process by checking the pool status:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zpool status\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sync Disabled:"})}),"\n",(0,i.jsx)(n.p,{children:"Disabling sync improved performance by reducing the backlog to 1-7 seconds from higher values, leading to faster operations."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"zfs set sync=disabled $ZFS_POOL_NAME/$ZFS_DATASET_NAME\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prefetch Tuning:"})}),"\n",(0,i.jsxs)(n.p,{children:["Keeping ",(0,i.jsx)(n.code,{children:"zfs_prefetch_disable"})," set to 1 (disable) "]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Command to check prefetch status:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cat /sys/module/zfs/parameters/zfs_prefetch_disable\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"To disable prefetch (set to 1):"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo 1 | sudo tee /sys/module/zfs/parameters/zfs_prefetch_disable\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const o={},r=i.createContext(o);function t(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);