"use strict";(self.webpackChunkgeodd_networks=self.webpackChunkgeodd_networks||[]).push([[5658],{7055:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=n(4848),r=n(8453);const s={displayed_sidebar:"celestiaSidebar"},o="Security for Celestia App",l={id:"celestia/validator/security",title:"Security for Celestia App",description:"Validators in Celestia often rely on cloud or baremetal servers for their infrastructure. While some providers offer basic protection, most setups lack advanced firewall solutions such as DDoS mitigation. This makes it critical to implement your own measures. By using FireHOL, we introduce a flexible and lightweight firewall that supports advanced features like rate limiting and dynamic IP blacklisting. This solution ensures that your node can handle increasing traffic while protecting it from malicious actors.",source:"@site/docs/celestia/validator/security.md",sourceDirName:"celestia/validator",slug:"/celestia/validator/security",permalink:"/docs/celestia/validator/security",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/celestia/validator/security.md",tags:[],version:"current",frontMatter:{displayed_sidebar:"celestiaSidebar"},sidebar:"celestiaSidebar",previous:{title:"Quickstart",permalink:"/docs/celestia/quickstart"},next:{title:"Register Validator",permalink:"/docs/celestia/validator/register-validator"}},a={},c=[{value:"Key features we\u2019ll leverage include:",id:"key-features-well-leverage-include",level:3},{value:"Install FireHOL",id:"install-firehol",level:3},{value:"Configure FireHOL for Celestia consensus node",id:"configure-firehol-for-celestia-consensus-node",level:2},{value:"Key Configuration Details",id:"key-configuration-details",level:3},{value:"Apply and Test FireHOL Configuration",id:"apply-and-test-firehol-configuration",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"security-for-celestia-app",children:"Security for Celestia App"})}),"\n",(0,i.jsxs)(t.p,{children:["Validators in Celestia often rely on cloud or baremetal servers for their infrastructure. While some providers offer basic protection, most setups lack advanced firewall solutions such as DDoS mitigation. This makes it critical to implement your own measures. By using ",(0,i.jsx)(t.a,{href:"https://github.com/firehol/firehol",children:"FireHOL"}),", we introduce a flexible and lightweight firewall that supports advanced features like rate limiting and dynamic IP blacklisting. This solution ensures that your node can handle increasing traffic while protecting it from malicious actors."]}),"\n",(0,i.jsx)(t.h3,{id:"key-features-well-leverage-include",children:"Key features we\u2019ll leverage include:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Traffic filtering and rate limiting to mitigate potential DDoS attacks."}),"\n",(0,i.jsx)(t.li,{children:"Flexible firewall rules that allow only necessary traffic for Celestia consensus node operations."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"install-firehol",children:"Install FireHOL"}),"\n",(0,i.jsx)(t.p,{children:"First, ensure FireHOL is installed on your server. You can install it using the following commands:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"sudo apt update\nsudo apt install firehol\n"})}),"\n",(0,i.jsx)(t.p,{children:"Check that FireHOL is installed and working by running:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"sudo firehol version\n"})}),"\n",(0,i.jsx)(t.h2,{id:"configure-firehol-for-celestia-consensus-node",children:"Configure FireHOL for Celestia consensus node"}),"\n",(0,i.jsxs)(t.p,{children:["Create or modify your FireHOL configuration file, typically located at ",(0,i.jsx)(t.code,{children:"/etc/firehol/firehol.conf"}),". The following configuration allows P2P, RPC, and gRPC traffic, while applying security measures such as rate limiting and IP blacklisting."]}),"\n",(0,i.jsx)(t.p,{children:"FireHOL Configuration"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"version 6\n\n# Define ipsets for blocked IPs and networks from Emerging Threats and Firehole Level4\nipv4 ipset create blocked_ips hash:ip\nipv4 ipset addfile blocked_ips /etc/firehol/blocked.ips\n\nipv4 ipset create blocked_nets hash:net\nipv4 ipset addfile blocked_nets /etc/firehol/blocked.nets\n\n# Block IPs and Networks from Firehole Level4 and Emerging Threats\nipv4 blacklist full ipset:blocked_ips ipset:blocked_nets\n\n# Define your external network interface\ninterface4 enp5s0 internet\n    protection strong\n\n    # Allow SSH traffic on port 22 (TCP) for public access\n    server ssh accept\n\n    # Allow P2P traffic on port 26656 (TCP) with DDoS protection\n    server custom p2p tcp/26656 default accept\n    protection syn-floods 20/sec 50  # Protect against SYN flood attacks\n\n    # Allow RPC traffic on port 26657-26659 (TCP) with DDoS protection\n    server custom rpc tcp/26657:26659 default accept\n    protection syn-floods 20/sec 50  # Protect against SYN flood attacks\n\n    # Allow Prometheus metrics on port 26660 (limit to trusted IPs or internal network) with DDoS protection\n    server custom prometheus tcp/26660 default accept src 192.168.1.0/24\n    protection syn-floods 10/sec 20  # Protect against SYN flood attacks\n\n    # Allow gRPC communication on port 9090 (TCP) with DDoS protection\n    server custom grpc tcp/9090 default accept\n    protection syn-floods 15/sec 30  # Protect against SYN flood attacks\n\n    # Allow gRPC communication on port 9091 (TCP) with DDoS protection\n    server custom grpc2 tcp/9091 default accept\n    protection syn-floods 15/sec 30  # Protect against SYN flood attacks\n\n    # Allow REST API access on port 1317 (TCP) with DDoS protection\n    server custom rest tcp/1317 default accept\n    protection syn-floods 20/sec 40  # Protect against SYN flood attacks\n\n    # Additional Ports\n    server custom 11656 tcp/11656 default accept\n    server custom 11656 udp/11656 default accept\n    server custom 11065 tcp/11065 default accept\n    server custom 11065 udp/11065 default accept\n    server custom 36656 tcp/36656 default accept\n    server custom 36656 udp/36656 default accept\n    server custom 6065 tcp/6065 default accept\n    server custom 6065 udp/6065 default accept\n    server custom 9099 tcp/9099 default accept\n    server custom 9099 udp/9099 default accept\n\n    # Allow traffic on port 2121 for both TCP and UDP (separate rules for TCP and UDP)\n    server custom 2121 tcp/2121 default accept\n    protection syn-floods 20/sec 40  # Protect against SYN flood attacks\n    server custom 2121 udp/2121 default accept\n    protection syn-floods 20/sec 40  # Protect against SYN flood attacks\n\n    # Allow all traffic from localhost without specifying ports\n    server all accept src 127.0.0.1\n\n    # Allow all traffic from internal network without specifying ports\n    server all accept src 192.168.1.0/24\n\n    # Allow outgoing traffic for general internet access\n    client all accept\n\n# Block all IPv6 traffic\ninterface4 enp5s0 ipv6\n    server all drop\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Currently bind to eth0, make sure you bind it to the correct interface or bind all\n",(0,i.jsx)(t.code,{children:"interface any world"})]})}),"\n",(0,i.jsx)(t.h3,{id:"key-configuration-details",children:"Key Configuration Details"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"P2P (26656): Allows inbound P2P traffic, essential for Celestia consensus node synchronization."}),"\n",(0,i.jsx)(t.li,{children:"RPC (26657): Open to external sources with rate limiting to prevent abuse."}),"\n",(0,i.jsx)(t.li,{children:"Prometheus (26660): Restricted to internal networks or trusted IPs for security."}),"\n",(0,i.jsx)(t.li,{children:"gRPC (9090, 9091): Opened for gRPC communication."}),"\n",(0,i.jsx)(t.li,{children:"REST API (1317): Opened for API access."}),"\n",(0,i.jsx)(t.li,{children:"Blocked IPs: Dynamic IP blocking is applied using blacklists like Firehole Level4 and"}),"\n",(0,i.jsx)(t.li,{children:"Emerging Threats."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"apply-and-test-firehol-configuration",children:"Apply and Test FireHOL Configuration"}),"\n",(0,i.jsx)(t.p,{children:"Ensure FireHOL is enabled to start at boot by editing its default configuration:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"sudo nano /etc/default/firehol\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Change the ",(0,i.jsx)(t.code,{children:"START_FIREHOL"})," to YES"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"START_FIREHOL=YES\n"})}),"\n",(0,i.jsx)(t.p,{children:"Create your blocked IPs and Net files"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:'sudo sh -c \'echo "# This is the blocked IPs file\\n" > /etc/firehol/blocked.ips && echo "# This is the blocked networks file\\n" > /etc/firehol/blocked.nets\'\n'})}),"\n",(0,i.jsx)(t.p,{children:"Start the service to apply the new rules:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"sudo firehol start\n"})}),"\n",(0,i.jsx)(t.p,{children:"Verify that the rules are applied correctly by listing the current active firewall rules:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"sudo iptables -L\n"})}),"\n",(0,i.jsx)(t.p,{children:"Test specific port access using netcat:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"nc -zv <your_server_ip> 26657 # Test RPC port\nnc -zv <your_server_ip> 26656 # Test P2P port\n"})}),"\n",(0,i.jsx)(t.p,{children:"Check the logs to monitor any dropped connections:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"tail -f /var/log/kern.log\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Regularly monitor your firewall logs to detect any unusual traffic patterns.\nAdjust the rate limits based on your node\u2019s traffic load.\nKeep the blacklist sources updated for optimal protection."})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(6540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);